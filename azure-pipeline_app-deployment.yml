trigger:
- main

pool:
  name: MyOwnAgentPool

variables:
  APP_DIR: /home/bralmeidaa/tbm/
  APP_PATTERN: "uvicorn backend.main:app"

steps:
# 1. Copiar Conteúdo da App (sem alterações)
- task: CopyFiles@2
  displayName: 'Copiar arquivos da aplicação'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: |
      backend/**
      database/**
      requirements.txt
    TargetFolder: '$(APP_DIR)'
    OverWrite: true
    ignoreMakeDirErrors: true

# 2. Instalar dependências (sem alterações)
- script: |
    cd $(APP_DIR)
    python3 -m venv .venv
    source .venv/bin/activate
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Instalar dependências Python'

# 4. Iniciar Backend EM BACKGROUND (MODIFICADO)
- task: Bash@3
  displayName: 'Reiniciar Serviço e Capturar PIDs'
  inputs:
    targetType: 'inline'
    script: |
      SERVICE_NAME="tbm-app.service"

      echo "--- Verificando o status antes do reinício ---"
      
      # Captura o PID atual do serviço. systemd retorna '0' se o serviço não estiver rodando.
      OLD_PID=$(systemctl show --property MainPID --value $SERVICE_NAME)

      if [ "$OLD_PID" -ne 0 ]; then
        echo "Serviço '$SERVICE_NAME' está rodando com o PID Antigo: $OLD_PID"
      else
        echo "Serviço '$SERVICE_NAME' não estava rodando antes do reinício."
      fi

      echo "" # Linha em branco para separar
      echo "--- Reiniciando o serviço ---"
      sudo systemctl restart $SERVICE_NAME
      echo "Comando de reinício enviado para '$SERVICE_NAME'."

      # É importante esperar um pouco para o novo processo ser iniciado e o systemd registrar o novo PID.
      echo "Aguardando 3 segundos para o novo processo subir..."
      sleep 3

      echo ""
      echo "--- Verificando o status após o reinício ---"
      # Captura o novo PID
      NEW_PID=$(systemctl show --property MainPID --value $SERVICE_NAME)

      if [ "$NEW_PID" -ne 0 ]; then
        echo "✅ Sucesso! Serviço '$SERVICE_NAME' agora está rodando com o PID Novo: $NEW_PID"
      else
        echo "❌ ERRO: O serviço '$SERVICE_NAME' não conseguiu iniciar após o reinício."
        echo "Verifique os logs no servidor com o comando: 'journalctl -u $SERVICE_NAME'"
        exit 1 # Faz a tarefa do pipeline falhar
      fi

# 5. (OPCIONAL, MAS RECOMENDADO) Verificar se a App está no ar
- script: |
    echo "Aguardando o serviço reiniciar..."
    sleep 10
    
    # Verifica o status do serviço
    sudo systemctl is-active --quiet tbm-app.service || (echo "O serviço tbm-app não está ativo!" && exit 1)

    # Tenta acessar o endpoint
    curl --fail http://localhost:8000/health || (echo "A aplicação não respondeu." && exit 1)
    
    echo "Serviço e aplicação respondendo com sucesso!"
  displayName: 'Verificar se o Serviço está Rodando'