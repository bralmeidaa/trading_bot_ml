trigger:
- main

pool:
  name: MyOwnAgentPool

variables:
  APP_DIR: /home/bralmeidaa/tbm/
  # Variável para armazenar o PID da aplicação entre as tarefas
  AppPID: '' 

steps:
# 0. Parar a Aplicação (NOVA TAREFA)
- script: |
    echo "Tentando parar o processo com PID: $(AppPID)"
    # Verifica se a variável AppPID não está vazia antes de tentar parar
    if [ -n "$(App_PID)" ]; then
      # Agora, verifica se o processo com esse PID está realmente rodando
      # O '2>/dev/null' suprime a mensagem de erro "No such process" se o PID não existir
      if kill -0 $(App_PID) 2>/dev/null; then
        echo "Processo com PID $(App_PID) está rodando. Enviando comando 'kill'..."
        kill $(App_PID)
        echo "Comando 'kill' enviado com sucesso."
      else
        echo "A variável de PID $(App_PID) foi encontrada, mas o processo não está mais rodando."
      fi
    else
      echo "Nenhuma variável de PID foi definida. Nada a fazer."
    fi
  displayName: 'Parar Backend'
  # Condição 'always()' garante que esta tarefa sempre será executada,
  # mesmo que as tarefas anteriores (como os testes) falhem.
  # Isso evita deixar processos zumbis no seu agente.
  condition: always()

# 1. Copiar Conteúdo da App (sem alterações)
- task: CopyFiles@2
  displayName: 'Copiar arquivos da aplicação'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: |
      backend/**
      database/**
      requirements.txt
    TargetFolder: '$(APP_DIR)'
    OverWrite: true
    ignoreMakeDirErrors: true

# 2. Instalar dependências (sem alterações)
- script: |
    cd $(APP_DIR)
    python3 -m venv .venv
    source .venv/bin/activate
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Instalar dependências Python'

# 4. Iniciar Backend EM BACKGROUND (MODIFICADO)
- script: |
    cd $(APP_DIR)
    source .venv/bin/activate
    
    echo "Iniciando Uvicorn em background..."
    # Inicia o servidor, redireciona a saída para um log e usa '&' para rodar em background
    python3 -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 > app.log 2>&1 &
    
    # Captura o PID do último processo em background
    APP_PID=$!
    
    echo "Aplicação iniciada com PID $APP_PID"
    
    # Salva o PID em uma variável de pipeline para ser usada em outras tarefas
    export App_PID=$APP_PID
  displayName: 'Iniciar Backend em Background'

# 5. (OPCIONAL, MAS RECOMENDADO) Verificar se a App está no ar
- script: |
    echo "Aguardando a aplicação iniciar..."
    sleep 10 # Dá um tempo para o servidor subir
    
    # Tenta acessar um endpoint para confirmar que está funcionando
    curl --fail http://localhost:8000/health || (echo "A aplicação não respondeu." && exit 1)
    
    echo "Aplicação respondendo com sucesso!"
  displayName: 'Verificar se a Aplicação está Rodando'